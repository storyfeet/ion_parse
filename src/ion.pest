/// Ion PEG ///

WHITESPACE = {" " | "\t"}
alpha      = { 'a'..'z' | 'A'..'Z' | "_" }
digit      = { '0'..'9' }
Escape     = {"\\" ~ ANY}

// Keyword definitions
KeyWord = _{ End 
           | Let 
           | Match | Case 
           | If | ElseIf | Else 
           | For | In
           | While
           | Fn }
  End    = { "end" }
  Let    = { "let" }
  Match  = { "match" }
  Case   = { "case" }
  If     = { "if" }
  Else   = { "else" }
  ElseIf = { "else if" }
  For    = { "for" }
  In     = { "in" }
  While  = { "while" }
  Fn     = { "fn" }

Sep = { ";" | "\n" }

// Variable definitions
Ident = ${ alpha+ ~ digit* }
// TODO:Should we disable whitespace here?
Value = ${ (!Sep ~ ANY)+ } 

Variable = ${ Ident ~ TypeAnotate? }
  TypeIdent   = { Ident }
  TypeAnotate = { ":" ~ TypeIdent }
  
Variables = { Variable+ }

Range = _{NumRange | Eval}
  NumRange = {"[" ~ digit* ~".." ~digit* ~"]"}


// TODO: glob, proc, brace
Eval = _{ ArrayEval | VarEval | StringEval}
  StringEval = ${"\""~ (Escape|Eval|(!"\""~ANY))*~ "\""}
  ArrayEval = ${ "@" ~ Ident}
  VarEval   = ${ "$" ~ Ident}

// Assignemnt operations
// TODO: typed Value
Assignment = _{ (Assign 
                | IncAssign 
                | DecAssign 
                | MulAssign 
                | DivAssign) ~ Value }
  Assign    = { "=" }
  IncAssign = { "+=" }
  DecAssign = { "-=" }
  MulAssign = { "*=" }
  DivAssign = { "/=" }

// Statement definitions
// TODO: remove `Sep` from statements
// Added command for calls to programs that don't need to return a result
// at end becuase keywords should be checked first.
Statement  = { StatementLet | Block | (!KeyWord~ Command) }
Statements = { (Statement ~ Sep)+ }
Block      = _{ StatementFn 
              | StatementMatch 
              | StatementIf 
              | StatementFor
              | StatementWhile }


  Command = {Ident~(Value|Eval)+}
  // TODO: missing optional func description
  StatementFn = { Fn ~ Ident ~ Variables? ~ Statements? ~ End }
  
  StatementLet = { Let ~ Variables ~ Assignment }
  
  StatementMatch = { Match ~ Eval ~ Sep ~ Cases ~ End }
    Cases         = { StatementCase* }
    StatementCase = { (Case ~ Value ~ Statements?) 
                    | ("default" ~ Statements?) }
                    
  // TODO: `Predicate` + LogicOps
  StatementIf = { If ~ Pred ~ Sep ~ Statements? 
                ~ StatementElseIf* 
                ~ StatementElse? 
                ~ End }
    Pred            = { Ident }
    StatementElseIf = { ElseIf ~ Pred ~ Sep ~ Statements? }
    StatementElse   = { Else ~ Sep ~ Statements? }
    
  // TODO: do not use Ident
  StatementFor = { For ~ Ident+ ~ In ~ Range}// ~ Sep ~ Statements? ~ End }
  
  StatementWhile = { While ~ Eval ~ Sep ~ Statements? ~ End }

/// Parse script ///
main = { SOI ~ Statements? ~ EOI }

